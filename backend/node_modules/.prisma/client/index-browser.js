
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  password: 'password',
  email: 'email',
  role: 'role',
  phone: 'phone',
  address: 'address',
  avatar: 'avatar',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentCode: 'studentCode',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  class: 'class',
  grade: 'grade',
  bloodType: 'bloodType',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  occupation: 'occupation',
  workplace: 'workplace',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolNurseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  licenseNumber: 'licenseNumber',
  specialization: 'specialization',
  experience: 'experience',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManagerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  department: 'department',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentParentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  parentId: 'parentId',
  relationship: 'relationship',
  isPrimary: 'isPrimary'
};

exports.Prisma.HealthProfileScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  allergies: 'allergies',
  chronicDiseases: 'chronicDiseases',
  medications: 'medications',
  treatmentHistory: 'treatmentHistory',
  vision: 'vision',
  hearing: 'hearing',
  height: 'height',
  weight: 'weight',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalEventScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  nurseId: 'nurseId',
  createdById: 'createdById',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  severity: 'severity',
  location: 'location',
  symptoms: 'symptoms',
  treatment: 'treatment',
  outcome: 'outcome',
  occurredAt: 'occurredAt',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  dosage: 'dosage',
  unit: 'unit',
  manufacturer: 'manufacturer',
  expiryDate: 'expiryDate',
  stockQuantity: 'stockQuantity',
  minStockLevel: 'minStockLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentMedicationScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  parentId: 'parentId',
  medicationId: 'medicationId',
  dosage: 'dosage',
  frequency: 'frequency',
  duration: 'duration',
  instructions: 'instructions',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalEventMedicationScalarFieldEnum = {
  id: 'id',
  medicalEventId: 'medicalEventId',
  medicationId: 'medicationId',
  quantityUsed: 'quantityUsed',
  dosageGiven: 'dosageGiven',
  administeredAt: 'administeredAt',
  notes: 'notes'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  medicationId: 'medicationId',
  type: 'type',
  quantity: 'quantity',
  reason: 'reason',
  reference: 'reference',
  createdAt: 'createdAt'
};

exports.Prisma.VaccinationCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  vaccineName: 'vaccineName',
  targetGrades: 'targetGrades',
  scheduledDate: 'scheduledDate',
  deadline: 'deadline',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VaccinationScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  campaignId: 'campaignId',
  nurseId: 'nurseId',
  status: 'status',
  scheduledDate: 'scheduledDate',
  administeredDate: 'administeredDate',
  dose: 'dose',
  batch: 'batch',
  sideEffects: 'sideEffects',
  notes: 'notes',
  parentConsent: 'parentConsent',
  consentDate: 'consentDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalCheckCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  checkTypes: 'checkTypes',
  targetGrades: 'targetGrades',
  scheduledDate: 'scheduledDate',
  deadline: 'deadline',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalCheckScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  campaignId: 'campaignId',
  nurseId: 'nurseId',
  status: 'status',
  scheduledDate: 'scheduledDate',
  completedDate: 'completedDate',
  visionResult: 'visionResult',
  hearingResult: 'hearingResult',
  dentalResult: 'dentalResult',
  heightWeight: 'heightWeight',
  generalHealth: 'generalHealth',
  recommendations: 'recommendations',
  requiresFollowUp: 'requiresFollowUp',
  followUpDate: 'followUpDate',
  notes: 'notes',
  parentNotified: 'parentNotified',
  parentResponse: 'parentResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalDocumentScalarFieldEnum = {
  id: 'id',
  medicalEventId: 'medicalEventId',
  title: 'title',
  description: 'description',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  createdAt: 'createdAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  excerpt: 'excerpt',
  coverImage: 'coverImage',
  category: 'category',
  tags: 'tags',
  isPublished: 'isPublished',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vaccinationCampaignId: 'vaccinationCampaignId',
  medicalCheckCampaignId: 'medicalCheckCampaignId',
  title: 'title',
  message: 'message',
  type: 'type',
  status: 'status',
  scheduledAt: 'scheduledAt',
  sentAt: 'sentAt',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SchoolInfoScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  logo: 'logo',
  description: 'description',
  healthDeptHead: 'healthDeptHead',
  healthDeptPhone: 'healthDeptPhone',
  healthDeptEmail: 'healthDeptEmail',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  PARENT: 'PARENT',
  SCHOOL_NURSE: 'SCHOOL_NURSE',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

exports.MedicalEventType = exports.$Enums.MedicalEventType = {
  ACCIDENT: 'ACCIDENT',
  FEVER: 'FEVER',
  FALL: 'FALL',
  EPIDEMIC: 'EPIDEMIC',
  ALLERGY_REACTION: 'ALLERGY_REACTION',
  CHRONIC_DISEASE_EPISODE: 'CHRONIC_DISEASE_EPISODE',
  OTHER: 'OTHER'
};

exports.MedicalEventStatus = exports.$Enums.MedicalEventStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  REFERRED: 'REFERRED'
};

exports.MedicationStatus = exports.$Enums.MedicationStatus = {
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED'
};

exports.VaccinationStatus = exports.$Enums.VaccinationStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  POSTPONED: 'POSTPONED',
  CANCELLED: 'CANCELLED'
};

exports.MedicalCheckStatus = exports.$Enums.MedicalCheckStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  RESCHEDULED: 'RESCHEDULED',
  CANCELLED: 'CANCELLED'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  users: 'users',
  Student: 'Student',
  Parent: 'Parent',
  SchoolNurse: 'SchoolNurse',
  Manager: 'Manager',
  Admin: 'Admin',
  StudentParent: 'StudentParent',
  HealthProfile: 'HealthProfile',
  MedicalEvent: 'MedicalEvent',
  Medication: 'Medication',
  StudentMedication: 'StudentMedication',
  MedicalEventMedication: 'MedicalEventMedication',
  StockMovement: 'StockMovement',
  VaccinationCampaign: 'VaccinationCampaign',
  Vaccination: 'Vaccination',
  MedicalCheckCampaign: 'MedicalCheckCampaign',
  MedicalCheck: 'MedicalCheck',
  MedicalDocument: 'MedicalDocument',
  Post: 'Post',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  SchoolInfo: 'SchoolInfo'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
