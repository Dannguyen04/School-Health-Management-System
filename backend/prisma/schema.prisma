// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  STUDENT
  PARENT
  SCHOOL_NURSE
  MANAGER
  ADMIN
}

enum MedicalEventType {
  ACCIDENT
  FEVER
  FALL
  EPIDEMIC
  ALLERGY_REACTION
  CHRONIC_DISEASE_EPISODE
  OTHER
}

enum MedicalEventStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REFERRED
}

enum VaccinationStatus {
  UNSCHEDULED
  SCHEDULED
  COMPLETED
  POSTPONED
  CANCELLED
}

enum MedicalCheckStatus {
  SCHEDULED
  COMPLETED
  RESCHEDULED
  CANCELLED
}

enum MedicationStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ACTIVE
  EXPIRED
}

enum NotificationStatus {
  SENT
  DELIVERED
  READ
  EXPIRED
  ARCHIVED
}

enum VaccineRequirement {
  REQUIRED
  OPTIONAL
}

enum DoseType {
  FIRST // Liều đầu tiên
  SECOND // Liều thứ hai
  BOOSTER // Liều nhắc lại (liều tăng cường)
}

enum CampaignStatus {
  ACTIVE
  FINISHED
  CANCELLED
}

enum PhysicalClassification {
  EXCELLENT // Xuất sắc
  GOOD      // Tốt  
  AVERAGE   // Trung bình
  WEAK      // Yếu
}

enum OverallHealthStatus {
  NORMAL           // Bình thường
  NEEDS_ATTENTION  // Cần chú ý
  REQUIRES_TREATMENT // Cần điều trị
}

enum TreatmentStatus {
  ONGOING   // Đang điều trị
  STOPPED   // Đã dừng điều trị
  COMPLETED // Đã hoàn thành (nếu cần)
}

// Main Models
model users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  password  String
  email     String   @unique
  role      UserRole @default(PARENT)
  phone     String?
  address   String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations based on role
  studentProfile Student?
  parentProfile  Parent?
  nurseProfile   SchoolNurse?
  managerProfile Manager?
  adminProfile   Admin?

  // Common relations
  createdPosts  Post[]
  createdEvents MedicalEvent[] @relation("EventCreator")
  notifications Notification[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Student {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  studentCode      String   @unique
  dateOfBirth      DateTime
  gender           String
  class            String
  grade            String
  bloodType        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  parents             StudentParent[]
  healthProfile       HealthProfile?
  medicalEvents       MedicalEvent[]
  medicalChecks       MedicalCheck[]
  medications         StudentMedication[]
  vaccinationConsents VaccinationConsent[]
  vaccinations        vaccinations[]
  medicationAdministrationLogs MedicationAdministrationLog[] 
  vaccinationRecords  VaccinationRecord[] // Thêm trường đối ứng cho VaccinationRecord

  @@map("students")
}

model Parent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  occupation String?
  workplace  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  children            StudentParent[]
  medications         StudentMedication[]
  vaccinationConsents VaccinationConsent[]

  @@map("parents")
}

model SchoolNurse {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique @db.ObjectId
  specialization String?
  experience     Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  handledEvents MedicalEvent[]
  medicalChecks MedicalCheck[]
  vaccinations  vaccinations[]
  medicationAdministrationLogs MedicationAdministrationLog[] 
  vaccinationRecords  VaccinationRecord[] // Thêm trường đối ứng cho VaccinationRecord


  @@map("school_nurses")
}

model Manager {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  department String?
  position   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("managers")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Junction table for Student-Parent relationship
model StudentParent {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  studentId String @db.ObjectId
  parentId  String @db.ObjectId

  relationship String // "father", "mother", "guardian", etc.
  isPrimary    Boolean @default(false)

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@map("student_parents")
}

// Health Profile
model HealthProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String   @unique @db.ObjectId
  allergies        String[] // Array of allergy descriptions
  chronicDiseases  String[] // Array of chronic diseases
  medications      String[] // Current medications
  treatmentHistory String? // Medical treatment history
  vision           String? // Vision status
  hearing          String? // Hearing status
  height           Float? // Height in cm
  weight           Float? // Weight in kg
  notes            String? // Additional health notes
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("health_profiles")
}

// Medical Events
model MedicalEvent {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String  @db.ObjectId
  nurseId     String? @db.ObjectId
  createdById String  @db.ObjectId

  title       String
  description String
  type        MedicalEventType
  status      MedicalEventStatus @default(PENDING)
  severity    String // "low", "medium", "high", "critical"
  location    String? // Where the event occurred
  symptoms    String[] // Array of symptoms  
  treatment   String? // Treatment provided
  outcome     String? // Final outcome

  occurredAt DateTime
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  student   Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  nurse     SchoolNurse? @relation(fields: [nurseId], references: [id])
  createdBy users        @relation("EventCreator", fields: [createdById], references: [id])

  // Relations
  medicationsUsed MedicalEventMedication[]
  documents       MedicalDocument[]

  @@map("medical_events")
}

// Medications Management
model Medication {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  dosage        String
  unit          String // "tablet", "ml", "mg", etc.
  manufacturer  String?
  expiryDate    DateTime?
  stockQuantity Int       @default(0)
  minStockLevel Int       @default(10)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  studentMedications      StudentMedication[]
  medicalEventMedications MedicalEventMedication[]
  stockMovements          StockMovement[]
  medicationAdministrationLogs MedicationAdministrationLog[] 


  @@map("medications")
}

model StudentMedication {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String @db.ObjectId
  parentId     String @db.ObjectId
  medicationId String @db.ObjectId

  dosage       String
  frequency    String // "daily", "twice daily", "as needed", etc.
  duration     String? // How long to take
  instructions String? // Special instructions
  status       MedicationStatus @default(PENDING_APPROVAL)
  treatmentStatus TreatmentStatus @default(ONGOING)

  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  image      String?

  student    Student    @relation(fields: [studentId], references: [id])
  parent     Parent     @relation(fields: [parentId], references: [id])
  medication Medication @relation(fields: [medicationId], references: [id])
  medicationAdministrationLogs MedicationAdministrationLog[] 

  @@map("student_medications")
}

model MedicalEventMedication {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  medicalEventId String @db.ObjectId
  medicationId   String @db.ObjectId

  quantityUsed   Int
  dosageGiven    String
  administeredAt DateTime
  notes          String?

  medicalEvent MedicalEvent @relation(fields: [medicalEventId], references: [id])
  medication   Medication   @relation(fields: [medicationId], references: [id])

  @@map("medical_event_medications")
}

// Stock Management
model StockMovement {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  medicationId String @db.ObjectId

  type      String // "in", "out", "expired", "damaged"
  quantity  Int
  reason    String?
  reference String? // Reference to purchase order, usage record, etc.

  createdAt DateTime @default(now())

  medication Medication @relation(fields: [medicationId], references: [id])

  @@map("stock_movements")
}

// Vaccination Management
model VaccinationCampaign {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  vaccinationId String         @unique @db.ObjectId
  vaccinations       vaccinations   @relation(fields: [vaccinationId], references: [id])
  targetGrades  String[]
  scheduledDate DateTime
  deadline      DateTime
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        CampaignStatus @default(ACTIVE)

  // Relations
  notifications Notification[]
  consents      VaccinationConsent[]
  vaccinationRecords VaccinationRecord[] // Thêm trường đối ứng cho VaccinationRecord

  @@map("vaccination_campaigns")
}

model vaccinations {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  requirement      VaccineRequirement
  expiredDate      DateTime
  administeredDate DateTime?
  dose             DoseType?
  sideEffects      String?
  notes            String?
  studentId        String?  @db.ObjectId
  nurseId          String?  @db.ObjectId
  batchNumber      String?
  status           VaccinationStatus  @default(UNSCHEDULED)
  followUpRequired Boolean            @default(false)
  followUpDate     DateTime?
  reaction         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  // Relations
  student   Student?      @relation(fields: [studentId], references: [id])
  nurse     SchoolNurse?  @relation(fields: [nurseId], references: [id])
  campaign  VaccinationCampaign?

  @@map("vaccinations")
}

model VaccinationConsent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  String   @db.ObjectId
  studentId   String   @db.ObjectId
  parentId    String   @db.ObjectId
  consent     Boolean // true = đồng ý, false = từ chối
  notes       String? // Ghi chú của phụ huynh
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaign VaccinationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  student  Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent   Parent              @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([campaignId, studentId, parentId])
  @@map("vaccination_consents")
}
model VaccinationRecord {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  requirement      VaccineRequirement
  expiredDate      DateTime
  administeredDate DateTime
  dose             DoseType
  sideEffects      String?
  notes            String?
  reaction         String?
  status           VaccinationStatus @default(COMPLETED)
  followUpRequired Boolean           @default(false)
  followUpDate     DateTime?         

  campaignId String   @db.ObjectId
  studentId  String   @db.ObjectId
  nurseId    String   @db.ObjectId

  campaign VaccinationCampaign @relation(fields: [campaignId], references: [id])
  student  Student             @relation(fields: [studentId], references: [id])
  nurse    SchoolNurse         @relation(fields: [nurseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vaccination_records")
}
// Medical Check Management
model MedicalCheckCampaign {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  targetGrades  String[] // Array of grades
  scheduledDate DateTime
  deadline      DateTime
  isActive      Boolean        @default(true)
  status        CampaignStatus @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  medicalChecks MedicalCheck[]
  notifications Notification[]

  @@map("medical_check_campaigns")
}

model MedicalCheck {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String              @db.ObjectId
  campaignId    String              @db.ObjectId
  nurseId       String?             @db.ObjectId

  status        MedicalCheckStatus  @default(SCHEDULED)
  scheduledDate DateTime
  completedDate DateTime?

  // Khám Thể Lực
  height        Float?   // cm
  weight        Float?   // kg
  pulse         Int?     // Mạch (lần/phút)
  systolicBP    Int      // Huyết áp tâm thu (mmHg)
  diastolicBP   Int      // Huyết áp tâm trương (mmHg)
  physicalClassification PhysicalClassification    // Phân loại thể lực (e.g., "Tốt", "Trung bình", "Yếu")

  // Khám Lâm Sàng
  visionRightNoGlasses Float      // Thị lực mắt phải không kính (e.g., 8/10)
  visionLeftNoGlasses  Float      // Thị lực mắt trái không kính
  visionRightWithGlasses Float    // Thị lực mắt phải có kính
  visionLeftWithGlasses  Float    // Thị lực mắt trái có kính
  hearingLeftNormal    Float      // Thính lực tai trái nói thường (m)
  hearingLeftWhisper   Float      // Thính lực tai trái nói thầm (m)
  hearingRightNormal   Float      // Thính lực tai phải nói thường (m)
  hearingRightWhisper  Float      // Thính lực tai phải nói thầm (m)
  dentalUpperJaw       String     // Kết quả khám hàm trên
  dentalLowerJaw       String     // Kết quả khám hàm dưới
  clinicalNotes        String     // Ghi chú các bệnh lý từ khám lâm sàng (nhi khoa, tuần hoàn, hô hấp, tiêu hóa, thận-tiết niệu, thần kinh, tâm thần, mắt, tai mũi họng, răng hàm mặt)

  // Kết Luận Chung
  overallHealth        OverallHealthStatus  // Sức khỏe bình thường hoặc các vấn đề cần lưu ý
  recommendations      String?     // Khuyến nghị cho phụ huynh
  requiresFollowUp     Boolean     @default(false)
  followUpDate         DateTime?
  notes                String?     // Ghi chú tổng quát, bao gồm các bệnh lý khác

  parentNotified       Boolean     @default(false)
  parentResponse       String?     // Phản hồi của phụ huynh

  consultationStart    DateTime?
  consultationEnd      DateTime?

  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  student              Student              @relation(fields: [studentId], references: [id])
  campaign             MedicalCheckCampaign @relation(fields: [campaignId], references: [id])
  nurse                SchoolNurse   ?      @relation(fields: [nurseId], references: [id])

  @@map("medical_checks")
}

// Document Management
model MedicalDocument {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  medicalEventId String? @db.ObjectId

  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String

  createdAt DateTime @default(now())

  medicalEvent MedicalEvent? @relation(fields: [medicalEventId], references: [id])

  @@map("medical_documents")
}

// Blog & Content Management
model Post {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId

  title       String
  content     String
  excerpt     String?
  coverImage  String?
  category    String? // "health_tips", "school_news", "experience_sharing"
  tags        String[] // Array of tags
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author users @relation(fields: [authorId], references: [id])

  @@map("posts")
}

// Notification System
model Notification {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String  @db.ObjectId
  vaccinationCampaignId  String? @db.ObjectId
  medicalCheckCampaignId String? @db.ObjectId

  title   String
  message String
  type    String // "vaccination", "medical_check", "medication", "general"
  status  NotificationStatus @default(SENT)

  scheduledAt DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  archivedAt  DateTime?

  createdAt DateTime @default(now())

  user                 users                 @relation(fields: [userId], references: [id])
  vaccinationCampaign  VaccinationCampaign?  @relation(fields: [vaccinationCampaignId], references: [id])
  medicalCheckCampaign MedicalCheckCampaign? @relation(fields: [medicalCheckCampaignId], references: [id])

  @@map("notifications")
}

// Audit Log
model AuditLog {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId

  action     String // "create", "update", "delete", "login", "logout"
  resource   String // "student", "medication", "medical_event", etc.
  resourceId String? // ID of the affected resource
  details    Json? // Additional details about the action
  ipAddress  String?
  userAgent  String?

  createdAt DateTime @default(now())

  user users? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// School Information
model SchoolInfo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  phone       String?
  email       String?
  website     String?
  logo        String?
  description String?

  // Health department info
  healthDeptHead  String?
  healthDeptPhone String?
  healthDeptEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("school_info")
}

model MedicationAdministrationLog {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  studentMedicationId String   @db.ObjectId
  studentId           String   @db.ObjectId
  medicationId        String   @db.ObjectId
  nurseId             String   @db.ObjectId
  givenAt             DateTime @default(now())
  dosageGiven         String
  notes               String?

  studentMedication   StudentMedication @relation(fields: [studentMedicationId], references: [id])
  student             Student           @relation(fields: [studentId], references: [id])
  medication          Medication        @relation(fields: [medicationId], references: [id])
  nurse               SchoolNurse       @relation(fields: [nurseId], references: [id])

  @@map("medication_administration_logs")
}


