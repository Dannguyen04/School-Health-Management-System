generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  STUDENT
  PARENT
  SCHOOL_NURSE
  MANAGER
  ADMIN
}

enum MedicalEventType {
  ACCIDENT
  FEVER
  FALL
  EPIDEMIC
  ALLERGY_REACTION
  CHRONIC_DISEASE_EPISODE
  OTHER
}

enum MedicalEventStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REFERRED
}

enum VaccinationStatus {
  UNSCHEDULED
  SCHEDULED
  COMPLETED
  POSTPONED
  CANCELLED
}

enum MedicalCheckStatus {
  SCHEDULED
  COMPLETED
  RESCHEDULED
  CANCELLED
}

enum MedicationStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ACTIVE
  EXPIRED
}

enum NotificationStatus {
  SENT
  DELIVERED
  READ
  EXPIRED
  ARCHIVED
}

enum VaccineRequirement {
  REQUIRED
  OPTIONAL
}

enum DoseType {
  FIRST // Liều đầu tiên
  SECOND // Liều thứ hai
  BOOSTER // Liều nhắc lại (liều tăng cường)
}

enum CampaignStatus {
  ACTIVE
  FINISHED
  CANCELLED
}

enum PhysicalClassification {
  EXCELLENT // Xuất sắc
  GOOD      // Tốt  
  AVERAGE   // Trung bình
  WEAK      // Yếu
}

enum OverallHealthStatus {
  NORMAL           // Bình thường
  NEEDS_ATTENTION  // Cần chú ý
  REQUIRES_TREATMENT // Cần điều trị
}

enum TreatmentStatus {
  ONGOING   // Đang điều trị
  STOPPED   // Đã dừng điều trị
  COMPLETED // Đã hoàn thành (nếu cần)
}

// Main Models
model users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  password  String
  email     String   @unique
  role      UserRole @default(PARENT)
  phone     String?
  address   String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations based on role
  studentProfile Student?
  parentProfile  Parent?
  nurseProfile   SchoolNurse?
  managerProfile Manager?
  adminProfile   Admin?

  // Common relations
  createdPosts  Post[]
  createdEvents MedicalEvent[] @relation("EventCreator")
  notifications Notification[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Student {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  studentCode      String   @unique
  dateOfBirth      DateTime
  gender           String
  class            String
  grade            String
  bloodType        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  parents             StudentParent[]
  healthProfile       HealthProfile?
  medicalEvents       MedicalEvent[]
  medicalChecks       MedicalCheck[]
  medications         StudentMedication[]
  vaccinationConsents VaccinationConsent[]
  vaccinationRecords  VaccinationRecord[]
  medicationAdministrationLogs MedicationAdministrationLog[]

  @@map("students")
  @@index([grade])
  @@index([class])
}

model Parent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  occupation String?
  workplace  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  children            StudentParent[]
  medications         StudentMedication[]
  vaccinationConsents VaccinationConsent[]

  @@map("parents")
}

model SchoolNurse {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique @db.ObjectId
  specialization String?
  experience     Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  handledEvents MedicalEvent[]
  medicalChecks MedicalCheck[]
  vaccinationRecords  VaccinationRecord[]
  medicationAdministrationLogs MedicationAdministrationLog[]

  @@map("school_nurses")
}

model Manager {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  department String?
  position   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("managers")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Junction table for Student-Parent relationship
model StudentParent {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  studentId String @db.ObjectId
  parentId  String @db.ObjectId

  relationship String // "father", "mother", "guardian", etc.
  isPrimary    Boolean @default(false)

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@map("student_parents")
}

// Health Profile
model HealthProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String   @unique @db.ObjectId
  
  // Basic health indicators
  vision           String? // Vision status (e.g., "10/10", "8/10")
  hearing          String? // Hearing status (e.g., "Bình thường", "Kém")
  height           Float?  // Height in cm
  weight           Float?  // Weight in kg
  
  // Allergies - stored as JSON array for structured data
  allergies        Json[]  // Array of allergy objects with type, name, level, symptoms
  
  // Chronic diseases - stored as JSON array for structured data  
  chronicDiseases  Json[]  // Array of disease objects with group, name, onsetDate, level, status, medications, doctor, notes
  
  // Additional information
  medications      String[] // Current medications (legacy field)
  treatmentHistory String?  // Medical treatment history
  notes            String?  // Additional health notes
  
  // Metadata
  lastUpdatedBy    String?  @db.ObjectId // ID of user who last updated
  lastUpdatedAt    DateTime @updatedAt
  createdAt        DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("health_profiles")
}

// Medical Events
model MedicalEvent {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String  @db.ObjectId
  nurseId     String? @db.ObjectId
  createdById String  @db.ObjectId

  title       String
  description String
  type        MedicalEventType
  status      MedicalEventStatus @default(PENDING)
  severity    String // "low", "medium", "high", "critical"
  location    String? // Where the event occurred
  symptoms    String[] // Array of symptoms  
  treatment   String? // Treatment provided
  outcome     String? // Final outcome

  occurredAt DateTime
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  student   Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  nurse     SchoolNurse? @relation(fields: [nurseId], references: [id])
  createdBy users        @relation("EventCreator", fields: [createdById], references: [id])



  @@map("medical_events")
}



model StudentMedication {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String @db.ObjectId
  parentId     String @db.ObjectId

  // Thông tin thuốc (thay vì tham chiếu đến Medication)
  name         String
  description  String?
  dosage       String
  unit         String // "tablet", "ml", "mg", etc.
  manufacturer String?
  
  frequency    String // "daily", "twice daily", "as needed", etc.
  duration     String? // How long to take
  instructions String? // Special instructions
  status       MedicationStatus @default(PENDING_APPROVAL)
  treatmentStatus TreatmentStatus @default(ONGOING)

  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  image      String?

  student    Student    @relation(fields: [studentId], references: [id])
  parent     Parent     @relation(fields: [parentId], references: [id])
  medicationAdministrationLogs MedicationAdministrationLog[] 

  @@map("student_medications")
}





// Vaccination Campaign
model VaccinationCampaign {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  vaccineId     String         @db.ObjectId
  
  // Denormalized vaccine data for faster queries
  vaccineName   String         // Embedded for quick access
  vaccineManufacturer String   // Embedded for quick access
  vaccineRequirement VaccineRequirement // Embedded for quick access
  
  targetGrades  String[]
  scheduledDate DateTime
  deadline      DateTime
  isActive      Boolean        @default(true)
  status        CampaignStatus @default(ACTIVE)
  
  // Aggregated statistics for performance
  totalStudents     Int @default(0)  // Total eligible students
  consentedStudents Int @default(0)  // Students with consent
  vaccinatedStudents Int @default(0) // Students vaccinated
  completionRate    Float @default(0) // Calculated completion rate
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  vaccine             Vaccine              @relation(fields: [vaccineId], references: [id])
  notifications       Notification[]
  consents            VaccinationConsent[]
  vaccinationRecords  VaccinationRecord[]

  @@map("vaccination_campaigns")
  @@index([vaccineId])
  @@index([status])
  @@index([scheduledDate])
  @@index([targetGrades])
  @@index([vaccineName]) // For quick vaccine name searches
  @@index([completionRate]) // For sorting by completion
}

model Vaccine {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String   @unique
  requirement      VaccineRequirement
  manufacturer     String  
  origin           String  
  referenceUrl     String?  // đường dẫn tới web của vaccine đó
  description      String?  // mô tả vaccine
  sideEffects      String?  // tác dụng phụ
  contraindications String? //cấm chỉ định
  recommendedAge   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  campaigns        VaccinationCampaign[]
  vaccinationRecords VaccinationRecord[]

  @@map("vaccines")
}

model VaccinationConsent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  String   @db.ObjectId
  studentId   String   @db.ObjectId
  parentId    String   @db.ObjectId
  
  // Denormalized data for faster queries
  campaignName String  // Embedded campaign name
  vaccineName  String  // Embedded vaccine name
  studentName  String  // Embedded student name
  parentName   String  // Embedded parent name
  studentGrade String  // Embedded student grade
  
  consent     Boolean
  notes       String?
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaign VaccinationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  student  Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent   Parent              @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([campaignId, studentId, parentId])
  @@map("vaccination_consents")
  @@index([campaignId])
  @@index([studentId])
  @@index([parentId])
  @@index([consent])
  @@index([campaignName]) // For quick campaign searches
  @@index([studentName]) // For quick student searches
  @@index([studentGrade]) // For grade-based queries
}

model VaccinationRecord {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // References
  vaccineId        String   @db.ObjectId
  campaignId       String   @db.ObjectId
  studentId        String   @db.ObjectId
  nurseId          String   @db.ObjectId
  
  // Denormalized data for faster queries
  vaccineName      String   // Embedded vaccine name
  campaignName     String   // Embedded campaign name
  studentName      String   // Embedded student name
  nurseName        String   // Embedded nurse name
  studentGrade     String   // Embedded student grade
  studentClass     String   // Embedded student class
  
  // Vaccination details
  administeredDate DateTime
  dose             DoseType
  doseAmount       Float?  // liều lượng tiêm (tiêu chuẩn là 0.5 ml)
  batchNumber      String?


  
  // Results and follow-up
  sideEffects      String?
  reaction         String?
  notes            String?
  status           VaccinationStatus @default(COMPLETED)
  followUpRequired Boolean           @default(false)
  followUpDate     DateTime?
  
  // Metadata
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  vaccine    Vaccine             @relation(fields: [vaccineId], references: [id])
  campaign   VaccinationCampaign @relation(fields: [campaignId], references: [id])
  student    Student             @relation(fields: [studentId], references: [id])
  nurse      SchoolNurse         @relation(fields: [nurseId], references: [id])

  @@map("vaccination_records")
  @@index([vaccineId])
  @@index([campaignId])
  @@index([studentId])
  @@index([nurseId])
  @@index([administeredDate])
  @@index([status])
  @@index([vaccineName]) // For quick vaccine searches
  @@index([studentName]) // For quick student searches
  @@index([studentGrade]) // For grade-based queries
  @@unique([studentId, vaccineId, dose])
}

// Medical Check Management
model MedicalCheckCampaign {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  targetGrades  String[] // Array of grades
  scheduledDate DateTime
  deadline      DateTime
  isActive      Boolean        @default(true)
  status        CampaignStatus @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  medicalChecks MedicalCheck[]
  notifications Notification[]

  @@map("medical_check_campaigns")
}

model MedicalCheck {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String              @db.ObjectId
  campaignId    String              @db.ObjectId
  nurseId       String?             @db.ObjectId

  status        MedicalCheckStatus  @default(SCHEDULED)
  scheduledDate DateTime
  completedDate DateTime?

  // Khám Thể Lực
  height        Float?   // cm
  weight        Float?   // kg
  pulse         Int?     // Mạch (lần/phút)
  systolicBP    Int      // Huyết áp tâm thu (mmHg)
  diastolicBP   Int      // Huyết áp tâm trương (mmHg)
  physicalClassification PhysicalClassification    // Phân loại thể lực (e.g., "Tốt", "Trung bình", "Yếu")

  // Khám Lâm Sàng
  visionRightNoGlasses Float      // Thị lực mắt phải không kính (e.g., 8/10)
  visionLeftNoGlasses  Float      // Thị lực mắt trái không kính
  visionRightWithGlasses Float    // Thị lực mắt phải có kính
  visionLeftWithGlasses  Float    // Thị lực mắt trái có kính
  hearingLeftNormal    Float      // Thính lực tai trái nói thường (m)
  hearingLeftWhisper   Float      // Thính lực tai trái nói thầm (m)
  hearingRightNormal   Float      // Thính lực tai phải nói thường (m)
  hearingRightWhisper  Float      // Thính lực tai phải nói thầm (m)
  dentalUpperJaw       String     // Kết quả khám hàm trên
  dentalLowerJaw       String     // Kết quả khám hàm dưới
  clinicalNotes        String     // Ghi chú các bệnh lý từ khám lâm sàng (nhi khoa, tuần hoàn, hô hấp, tiêu hóa, thận-tiết niệu, thần kinh, tâm thần, mắt, tai mũi họng, răng hàm mặt)

 
  // Kết Luận Chung
  overallHealth        OverallHealthStatus  // Sức khỏe bình thường hoặc các vấn đề cần lưu ý
  recommendations      String?     // Khuyến nghị cho phụ huynh
  requiresFollowUp     Boolean     @default(false)
  followUpDate         DateTime?
  notes                String?     // Ghi chú tổng quát, bao gồm các bệnh lý khác

  // Lịch tư vấn
  consultationStart     DateTime?  // Thời gian bắt đầu tư vấn
  consultationEnd       DateTime?  // Thời gian kết thúc tư vấn

  parentNotified       Boolean     @default(false)
  parentResponse       String?     // Phản hồi của phụ huynh

  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  student              Student              @relation(fields: [studentId], references: [id])
  campaign             MedicalCheckCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  nurse                SchoolNurse   ?      @relation(fields: [nurseId], references: [id])

  @@map("medical_checks")
}



// Blog & Content Management
model Post {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId

  title       String
  content     String
  excerpt     String?
  coverImage  String?
  category    String? // "health_tips", "school_news", "experience_sharing"
  tags        String[] // Array of tags
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author users @relation(fields: [authorId], references: [id])

  @@map("posts")
}

// Notification System
model Notification {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String  @db.ObjectId
  vaccinationCampaignId  String? @db.ObjectId
  medicalCheckCampaignId String? @db.ObjectId

  title   String
  message String
  type    String // "vaccination", "medical_check", "medication", "general"
  status  NotificationStatus @default(SENT)

  scheduledAt DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  archivedAt  DateTime?

  createdAt DateTime @default(now())

  user                 users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  vaccinationCampaign  VaccinationCampaign?  @relation(fields: [vaccinationCampaignId], references: [id], onDelete: Cascade)
  medicalCheckCampaign MedicalCheckCampaign? @relation(fields: [medicalCheckCampaignId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Audit Log
model AuditLog {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId

  action     String // "create", "update", "delete", "login", "logout"
  resource   String // "student", "medication", "medical_event", etc.
  resourceId String? // ID of the affected resource
  details    Json? // Additional details about the action
  ipAddress  String?
  userAgent  String?

  createdAt DateTime @default(now())

  user users? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}



model MedicationAdministrationLog {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  studentMedicationId String   @db.ObjectId
  studentId           String   @db.ObjectId
  nurseId             String   @db.ObjectId
  givenAt             DateTime @default(now())
  dosageGiven         String
  notes               String?

  studentMedication   StudentMedication @relation(fields: [studentMedicationId], references: [id])
  student             Student           @relation(fields: [studentId], references: [id])
  nurse               SchoolNurse       @relation(fields: [nurseId], references: [id])

  @@map("medication_administration_logs")
}


