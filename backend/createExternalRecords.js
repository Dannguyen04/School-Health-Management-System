import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function updateExistingVaccineRecords() {
    try {
        console.log("üîÑ ƒêang ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c vaccine records...");

        // 1. S·ª≠ d·ª•ng raw query ƒë·ªÉ l·∫•y vaccines c√≥ diseaseName null ho·∫∑c kh√¥ng t·ªìn t·∫°i
        const result = await prisma.$runCommandRaw({
            find: "vaccines",
            filter: {
                $or: [
                    { diseaseName: null },
                    { diseaseName: { $exists: false } },
                ],
            },
        });

        console.log(
            `üìã T√¨m th·∫•y ${result.cursor.firstBatch.length} vaccine records c·∫ßn c·∫≠p nh·∫≠t:`
        );

        if (result.cursor.firstBatch.length === 0) {
            console.log("‚úÖ T·∫•t c·∫£ vaccine ƒë√£ c√≥ diseaseName!");
            return;
        }

        // 2. C·∫≠p nh·∫≠t t·ª´ng vaccine thi·∫øu diseaseName
        for (const vaccine of result.cursor.firstBatch) {
            console.log(`\nüìù C·∫≠p nh·∫≠t ${vaccine.name} (ID: ${vaccine._id})`);

            // D·ª± ƒëo√°n diseaseName d·ª±a tr√™n t√™n vaccine
            const diseaseName = predictDiseaseName(vaccine.name);
            console.log(`   D·ª± ƒëo√°n diseaseName: "${diseaseName}"`);

            // S·ª≠ d·ª•ng raw update ƒë·ªÉ c·∫≠p nh·∫≠t
            await prisma.$runCommandRaw({
                update: "vaccines",
                updates: [
                    {
                        q: { _id: vaccine._id },
                        u: { $set: { diseaseName: diseaseName } },
                    },
                ],
            });

            console.log(`   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!`);
        }

        console.log(
            `\nüéâ Ho√†n th√†nh c·∫≠p nh·∫≠t ${result.cursor.firstBatch.length} vaccine records!`
        );

        // 3. Ki·ªÉm tra l·∫°i sau khi c·∫≠p nh·∫≠t
        console.log("\nüîç Ki·ªÉm tra l·∫°i sau khi c·∫≠p nh·∫≠t:");
        const allVaccines = await prisma.vaccine.findMany({
            select: {
                id: true,
                name: true,
                diseaseName: true,
            },
        });

        for (const vaccine of allVaccines) {
            console.log(`- ${vaccine.name}: "${vaccine.diseaseName}"`);
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t vaccine records:", error);
    } finally {
        await prisma.$disconnect();
    }
}

// H√†m d·ª± ƒëo√°n diseaseName d·ª±a tr√™n t√™n vaccine
function predictDiseaseName(vaccineName) {
    const name = vaccineName.toLowerCase();

    // Mapping c√°c t·ª´ kh√≥a ph·ªï bi·∫øn
    const diseaseMapping = {
        // COVID
        covid: "COVID-19",
        coronavirus: "COVID-19",
        "sars-cov-2": "COVID-19",
        pfizer: "COVID-19",
        moderna: "COVID-19",
        astrazeneca: "COVID-19",

        // C√∫m
        flu: "C√∫m m√πa",
        influenza: "C√∫m m√πa",
        c√∫m: "C√∫m m√πa",

        // Vi√™m gan
        "hepatitis a": "Vi√™m gan A",
        "hepatitis b": "Vi√™m gan B",
        hepatitis: "Vi√™m gan",
        hbv: "Vi√™m gan B",
        hav: "Vi√™m gan A",

        // BCG/Lao
        bcg: "Lao ph·ªïi",
        tuberculosis: "Lao ph·ªïi",
        lao: "Lao ph·ªïi",

        // B·∫°i li·ªát
        polio: "B·∫°i li·ªát",
        "b·∫°i li·ªát": "B·∫°i li·ªát",

        // S·ªüi
        measles: "S·ªüi",
        s·ªüi: "S·ªüi",
        rubella: "Rubella",
        mmr: "S·ªüi, Quai b·ªã, Rubella",

        // B·∫°ch h·∫ßu, Ho g√†, U·ªën v√°n
        dtp: "B·∫°ch h·∫ßu, Ho g√†, U·ªën v√°n",
        dpt: "B·∫°ch h·∫ßu, Ho g√†, U·ªën v√°n",
        hexaxim: "B·∫°ch h·∫ßu, Ho g√†, U·ªën v√°n, B·∫°i li·ªát, Hib, Vi√™m gan B",
        "6 trong 1": "B·∫°ch h·∫ßu, Ho g√†, U·ªën v√°n, B·∫°i li·ªát, Hib, Vi√™m gan B",
        diphtheria: "B·∫°ch h·∫ßu",
        pertussis: "Ho g√†",
        tetanus: "U·ªën v√°n",
        "b·∫°ch h·∫ßu": "B·∫°ch h·∫ßu",
        "ho g√†": "Ho g√†",
        "u·ªën v√°n": "U·ªën v√°n",

        // Th·ªßy ƒë·∫≠u
        varicella: "Th·ªßy ƒë·∫≠u",
        chickenpox: "Th·ªßy ƒë·∫≠u",
        "th·ªßy ƒë·∫≠u": "Th·ªßy ƒë·∫≠u",

        // Vi√™m n√£o Nh·∫≠t B·∫£n
        "japanese encephalitis": "Vi√™m n√£o Nh·∫≠t B·∫£n",
        je: "Vi√™m n√£o Nh·∫≠t B·∫£n",
        "vi√™m n√£o": "Vi√™m n√£o Nh·∫≠t B·∫£n",

        // HPV
        hpv: "HPV (Ung th∆∞ c·ªï t·ª≠ cung)",
        "cervical cancer": "HPV (Ung th∆∞ c·ªï t·ª≠ cung)",

        // Pneumonia
        pneumonia: "Vi√™m ph·ªïi",
        pneumococcal: "Vi√™m ph·ªïi do ph·∫ø c·∫ßu",
        "vi√™m ph·ªïi": "Vi√™m ph·ªïi",

        // HIB
        hib: "Haemophilus influenzae type b",
        haemophilus: "Haemophilus influenzae type b",

        // D·∫°i
        d·∫°i: "B·ªánh d·∫°i",
        rabies: "B·ªánh d·∫°i",

        // HIV (th·ª±c t·∫ø kh√¥ng c√≥ vaccine HIV, c√≥ th·ªÉ l√† test vaccine)
        hiv: "HIV (Vaccine th·ª≠ nghi·ªám)",

        // External/System
        external: "Ph√≤ng ch·ªëng b·ªánh ngo√†i tr∆∞·ªùng",
        system: "H·ªá th·ªëng ph√≤ng ch·ªëng b·ªánh",
    };

    // T√¨m ki·∫øm t·ª´ kh√≥a trong t√™n vaccine
    for (const [keyword, disease] of Object.entries(diseaseMapping)) {
        if (name.includes(keyword)) {
            return disease;
        }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o t√™n chung
    return `Ph√≤ng ch·ªëng b·ªánh (${vaccineName})`;
}

// Ch·∫°y script
updateExistingVaccineRecords();
